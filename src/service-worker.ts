/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkOnly, StaleWhileRevalidate } from 'workbox-strategies';
import { db } from './db';
import { makePostRequest } from './api';
import { Queue } from 'workbox-background-sync';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
// BACKGTOUND SYNC - START v1
// const backgroundSyncCallbackFn = (bgSyncParam: any) => {
//   console.log('[SW] Background syncing', bgSyncParam.queue.name);
//   db.orders
//     .where('status')
//     .equals('not_synced')
//     .toArray().then(function (orders) {
//       orders.map(order => {
//         makePostRequest(order).then(function (r) {
//           if (r?.ok) {
//             db.orders.update(order, {status: 'synced'});
//           }
//         });
//         return order;
//       })
//     })
// }

// const bgSyncPlugin = new BackgroundSyncPlugin('not-synced-orders', {
//   maxRetentionTime: 24 * 60,
//   onSync: backgroundSyncCallbackFn
// });

// registerRoute(/.*\/api.*/, new NetworkOnly({ plugins: [bgSyncPlugin] }), 'POST');
// BACKGTOUND SYNC - END v1
// BACKGTOUND SYNC - START v1.2
const bgSyncQueue = new Queue('not-synced-orders', {
  maxRetentionTime: 24 * 60,
  //@ts-ignore
  onSync: () => backgroundSyncCallbackFn()
});


async function backgroundSyncCallbackFn() {
  console.log('[SW] Background syncing | backgroundSyncCallbackFn');
  if (bgSyncQueue) {
    replayQueue(bgSyncQueue);
    return;
  }
  return Promise.resolve('empty');
}

const replayQueue = async (queue: Queue) => {
  let entry;
  while ((entry = await queue.shiftRequest())) {
    //while we have requests to replay
    await entry.request.clone().json();
    try {
      await db.orders
      .where('status')
      .equals('not_synced')
      .toArray().then(function (orders) {
        orders.map(order => {
          makePostRequest(order).then(function (r) {
            if (r?.ok) {
              db.orders.update(order, {status: 'synced'});
            }
          });
          return order;
        })
      })
    } catch (error) {
      await queue.unshiftRequest(entry); //put failed request back into queue, and try again later
    }
  }
  return Promise.resolve();
};

self.onfetch = (event) => {
  let requestClone = event.request.clone();
  if (requestClone.method === 'POST' && requestClone.url.includes('/api')) {
    event.respondWith(
        //@ts-ignore
          (() => {
              const promiseChain = fetch(requestClone).catch(() => {
                  return bgSyncQueue.pushRequest(event);
              });
              event.waitUntil(promiseChain);
              return promiseChain;
          })()
      );
  } else {
      event.respondWith(fetch(event.request));
  }
};

function isIosDevice() {
  return !!navigator.platform && /iPad|iPhone|MacIntel|iPod/.test(navigator.platform) && /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
}

if (navigator.onLine && isIosDevice()) {
  if (window.MessageChannel) {
      var messageChannel = new MessageChannel();
      messageChannel.port1.onmessage = (event) => {
          // this.onMessageSuccess(event);
      };
  } else {
      navigator.serviceWorker.onmessage = (event) => {
          // this.onMessageSuccess(event);
      };
  }
  navigator.serviceWorker.ready.then((reg) => {
      try {
        //@ts-ignore
          reg.active.postMessage(
              {
                  text: 'sync',
                  port: messageChannel && messageChannel.port2,
              },
              [messageChannel && messageChannel.port2]
          );
      } catch (e) {
          //firefox support
          //@ts-ignore
          reg.active.postMessage({
              text: 'sync',
          });
      }
  });
}

self.onmessage = (event) => {
  if (event.data.text === 'sync') {
      event.waitUntil(
        backgroundSyncCallbackFn().then((res) => {
              if (res !== 'empty') {
                  if (event.source) {
                      event.source.postMessage('doNotification');//this is telling the client code to show a notification (i have a built in notification system into the app, that does not use push notification, just shows a little pill on the bottom of the app with the message)
                  } else if (event.data.port) {
                      event.data.port.postMessage('doNotification'); //same thing
                  }
                  return res;
              }
          })
      );
  }
};
// BACKGTOUND SYNC - END v1.2

// BACKGTOUND SYNC - START v2
// self.addEventListener('sync', function(event) {
//   console.log('[SW] Background syncing', event);

//   //@ts-ignore
//   if (event.tag === 'not-synced-order-tag') {
//     console.log('[SW] Syncing new orders');
//     //@ts-ignore
//     event.waitUntil(
//       db.orders
//       .where('status')
//       .equals('not_synced')
//       .toArray().then(function (orders) {
//         orders.map(order => {
//           makeRequest(order);
//           db.orders.update(order, {status: 'synced'})
//         })
//       })
//       .then(function () {
//         self.registration.showNotification('Orders synced with server');
//       })
//     );

//   }
// })
// BACKGTOUND SYNC - END v2

